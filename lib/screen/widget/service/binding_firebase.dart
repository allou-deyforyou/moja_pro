// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'dart:isolate';

import 'package:firebase_auth/firebase_auth.dart' show FirebaseAuth;
import 'package:firebase_storage/firebase_storage.dart' show FirebaseStorage;
import 'package:firebase_messaging/firebase_messaging.dart' show FirebaseMessaging;
import 'package:firebase_analytics/firebase_analytics.dart' show FirebaseAnalytics;
import 'package:firebase_crashlytics/firebase_crashlytics.dart' show FirebaseCrashlytics;
import 'package:firebase_remote_config/firebase_remote_config.dart' show FirebaseRemoteConfig;
import 'package:firebase_core/firebase_core.dart' show Firebase, FirebaseApp, FirebaseOptions;
import 'package:flutter/foundation.dart' show FlutterError, PlatformDispatcher, TargetPlatform, defaultTargetPlatform, kIsWeb;

class FirebaseConfig {
  const FirebaseConfig._();

  static FirebaseAuth get firebaseAuth => FirebaseAuth.instanceFor(app: app);
  static FirebaseStorage get firebaseStorage => FirebaseStorage.instanceFor(app: app);
  static FirebaseAnalytics get firebaseAnalytics => FirebaseAnalytics.instanceFor(app: app);
  static FirebaseRemoteConfig get firebaseRemoteConfig => FirebaseRemoteConfig.instanceFor(app: app);

  static FirebaseCrashlytics get firebaseCrashlytics => FirebaseCrashlytics.instance;
  static FirebaseMessaging get firebaseMessaging => FirebaseMessaging.instance;

  static FirebaseApp? _app;
  static FirebaseApp get app => _app!;

  static Future<void> development() async {
    _app ??= await Firebase.initializeApp(
      options: _currentPlatform,
    );

    _initializeInstances();
  }

  static Future<void> production() async {
    _app ??= await Firebase.initializeApp(
      options: _currentPlatform,
    );

    _initializeInstances();
  }

  static Future<void> _initializeInstances() async {
    FlutterError.onError = (errorDetails) {
      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);
    };

    PlatformDispatcher.instance.onError = (error, stack) {
      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);
      return true;
    };

    Isolate.current.addErrorListener(RawReceivePort((pair) async {
      final List<dynamic> errorAndStacktrace = pair;
      await FirebaseCrashlytics.instance.recordError(
        errorAndStacktrace.first,
        errorAndStacktrace.last,
        fatal: true,
      );
    }).sendPort);

    return firebaseAnalytics.logAppOpen();
  }

  static FirebaseOptions get _currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return _android;
      case TargetPlatform.iOS:
        return _ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions _android = FirebaseOptions(
    apiKey: 'AIzaSyDrVgU4jsdjly2_vN17-MLgZS3FpRq1Oao',
    appId: '1:73497335498:android:25fb78348a3302637a4633',
    messagingSenderId: '73497335498',
    projectId: 'moja-project',
    storageBucket: 'moja-project.appspot.com',
  );

  static const FirebaseOptions _ios = FirebaseOptions(
    apiKey: 'AIzaSyCmOtdB_xflsMbrc6dUnWLA8i1ODT9i_IM',
    appId: '1:73497335498:ios:77dee701af07353f7a4633',
    messagingSenderId: '73497335498',
    projectId: 'moja-project',
    storageBucket: 'moja-project.appspot.com',
    iosBundleId: 'com.moja.mojapro',
  );
}
